const NULL 0

class bool
  prop val 1

  const true 1
  const false 0
end

class cstr
  var tempmin 1
  var tempmax 1
  var tempmul 1
  
  oper proc len 1 1
    copy readc 0 == if
      disc 0 ret
    end
    copy
    do
      1 +
  
      copy readc
    end
    covr -
    swap disc
    ret
  end

  {
  args: pointer
  result: 
  
  prints a string
  }
  oper proc print 1 0
    copy cstr.len swap 1 1 sys3 disc

    ret
  end

  {
  args:
  result:
  
  prints a new line
  }
  oper proc cr 0 0
    { print new line }
    `\n` 1 1 sys3 disc
    ret
  end

  {
  prints
  }
  oper proc println 1 0
    cstr.print
    cstr.cr
    ret
  end

  
  {
  args: pointer pointer
  result: int
  
  compares strings, returns 1 if they are not equal
  }
  oper proc eq 2 1
    covr readc
    covr readc
    != if disc disc bool.false ret end
    1 -
    swap 1 -
    do
      1 +
      swap 1 +
      covr readc
      covr readc
      covr 0 ==
      covr 0 == &&
      if
        disc disc
        disc disc
        bool.true
        ret
      end
      covr 0 ==
      covr 0 == ||
      if
        disc disc
        disc disc
        bool.false
        ret
      end
      ==
    end
    disc
    disc
    bool.false
    ret
  end

  {
  args: pointer pointer
  result: 
  
  copy a string from a pointer to another
  }
  oper proc cpy 2 2
    covr
    covr
    do
      covr
      covr readc
  
      putc
      disc
  
      swap 1 +
      swap 1 +
      copy readc 0 !=
    end
    swap 1 +
    0
    putc
    disc
    disc

    ret
  end
  
  {
  args: ptr[cstr]
  rets: int[char]

  Get the last char in a cstring
  }
  oper proc last 1 1
    1 -
    do
      1 +
      copy readc
      0 !=
    end
    1 -
    readc
  
    ret
  end

  oper proc clear 1 1
    copy readc 0 == if ret end
    copy
    do
      copy
      0
      putc
      disc
  
      1 +
      copy readc
    end
    disc
  
    ret
  end
  
  oper proc cat 2 1
    covr copy cstr.len +
    swap cstr.cpy disc disc

    ret
  end

  {
  args: ptr[string]
  returns: int[val]
  
  returns 1 if the string is a number
  }
  oper proc isnum 1 1
    cstr.tempmin '0' putc disc
    cstr.tempmax '9' putc disc
  
    copy copy cstr.len + 1 -
    readc 
    copy 'b' == if
      cstr.tempmax '1' putc disc
    end
    copy 'h' == if
      cstr.tempmax 'f' putc disc
    end
    disc
    copy readc
    '-' == if 1 + end
    do
      copy readc
      copy cstr.tempmin readc <
      covr cstr.tempmax readc >
      || if
        disc
        copy readc 'b' ==  
        covr readc 'h' == ||
        covr cstr.len 1 == &&
        swap disc
        ret
      end
      disc
  
      1 +
      copy readc
      0 !=
    end
    disc
    1
    ret
  end
  
  {
  args: ptr[string]
  returns: int[value]
  
  returns the value of a int
  }
  oper proc int 1 1
    copy cstr.isnum ! if
      0
    end
      
    cstr.tempmul 10 putc disc
    
    copy copy cstr.len + 1 -
    copy readc 'b' == if
      cstr.tempmul 2 putc disc
    end
    copy readc 'h' == if
      cstr.tempmul 16 putc disc
    end
    disc
    
    0
    do
      cstr.tempmul readc *
      covr readc
      copy 'F' 1 + <
      covr 'A' 1 - > && if
        'A' 10 - -
        '0' +
      end
      '0' - +
      
      swap 1 +
      swap
  
      covr readc
      copy 0 !=
      covr 'b' != &&
      covr 'h' != &&
      swap disc
    end
    swap disc
  
    ret
  end

  var delim 1
  var tempstore 8

  {
  args: ptr[store] int[delim] ptr[cstr]
  result: ptr[store] ptr[cstr]
 
  splits a string on the delim
  }
  oper proc split 3 2
    swap cstr.delim swap putc disc
    cstr.tempstore swap put disc
  
    cstr.tempstore read cstr.clear

    {cstr}
    do
      covr readc
      cstr.delim readc ==
      if
        disc 1 +
        cstr.tempstore read
        ret
      end
      covr readc
      covr swap
      putc disc
      
      swap 1 +
      swap 1 +

      covr read 0 !=
    end
    
    ret
  end
end

class int
  prop data 8

  var tmpidx 8
  var tmpresult 32
 
  oper proc gettmp 0 1
    int.tmpresult 30 +
    int.tmpidx read -

    ret
  end

  oper proc inctmpidx 0 0
    int.tmpidx 
    int.tmpidx read 1 +
    putc disc

    ret
  end

  oper proc cstr 1 1
    do
      10 /%
      '0' +
      int.gettmp
      swap
      putc disc
      int.inctmpidx
      
      copy 0 !=
    end
    disc
    int.gettmp 1 +
    
    int.tmpidx 0 putc disc
    ret
  end

  oper proc cstrhex 1 1
    do
      16 /%
      copy 9 > if [ 'a' 10 - + ]
      copy 10 < if [ '0' + ]
      int.gettmp
      swap
      putc disc
      int.inctmpidx

      copy 0 !=
    end
    disc
    
    int.gettmp
    '$'
    putc disc
    int.inctmpidx

    int.gettmp 1 +
    
    int.tmpidx 0 putc disc
    ret
  end

  {
  args: ptr int
  result: ptr
  
  converts a int to a string
  }
  oper proc print 1 0
    int.cstr cstr.print cstr.cr
    
    int.tmpidx 0 putc disc
    ret
  end

  {
  args: ptr int
  result: ptr
  
  converts a int to a hex string
  }
  oper proc printhex 1 0
    do
      16 /%
      copy 9 > if [ 'a' 10 - + ]
      copy 10 < if [ '0' + ]
      int.gettmp
      swap
      putc disc
      int.inctmpidx

      copy 0 !=
    end
    disc
  
    int.gettmp
    'x'
    putc disc
    int.inctmpidx
  
    int.gettmp
    '0'
    putc disc
    int.inctmpidx
  
    int.gettmp 1 + cstr.print
    int.tmpidx 0 putc disc
    cstr.cr
    ret
  end
end

oper proc / 2 1
  /% disc

  ret
end

oper proc % 2 1
  /% swap disc

  ret
end