inc "stdlib/log.slm"
inc "stdlib.slm"


class fm
  enum
  0   READ
      WRITE
      READWR
      ACC
  end
  
  const CREATE 0040h
  const EXCL   0080h
  const NOCTTY 0100h
  const TURNIC 0200h
  const NOBLOK 0400h
  const DSYNC  0800h
  const ASYNC  1000h
end

class time
  prop sec 8
  prop nsec 8
end

class statresult
  prop dev 8
  prop ino 8
  prop nlink 8
  prop mode 4
  prop uid 4
  prop gid 4
  prop _ 4
  prop rdev 8
  prop size 8
  prop blksize 8
  prop blocks 8
  
  prop access time.SIZE
  prop modify time.SIZE
  prop create time.SIZE
  prop _ 24
end

class os
  var waitsig 8
  var statbuff statresult.SIZE
  var targ int.SIZE
  var tempbuff 64
  
  push proc fork 0 1
    sysc.FORK sys0
  
    ret
  end
  
  push proc chkdeverr 1 0
    0 < ! if ret end
    "ERROR: cant open /dev/null" cstr.println
  
    -1 quit
    ret
  end

  push proc fexists 1 1
    os.statbuff
    swap
    sysc.STAT sys2
    0 < !

    ret
  end

  {
  args: ptr[stringList]
  returns:
  
  runs a command
  }
  push proc execcmd 1 0
    (os.fork)
    copy 0 == if
      {child}
      1 {stdin}
      0
      fm.READ
      {TODO: magic num}
      "/dev/null"
      -100
      sysc.OPENAT sys4
      
      copy (os.chkdeverr)
     
      sysc.DUP2 sys2 
      (os.chkdeverr)
  
      covr envp swap copy read
    
      sysc.EXECVE sys3 disc
      disc disc
      -1
      quit
    end
    copy 0 > if
      {parent}
  
      NULL
      0
      os.waitsig
      -1
      sysc.WAIT4 sys4
      (os.chkdeverr)
      disc disc
      ret
    end
    0 < if
      "ERROR" cstr.println
    end
    disc
    ret
  end
  
  push proc execcmdloud 1 0
    (os.fork)
    copy 0 == if
      {child}
      covr envp swap copy read
    
      sysc.EXECVE sys3 disc
      disc disc
      -1
      quit
    end
    copy 0 > if
      {parent}
  
      NULL
      0
      os.waitsig
      -1
      sysc.WAIT4 sys4
      (os.chkdeverr)
      disc disc
      ret
    end
    0 < if
      "ERROR" cstr.println
    end
    disc
    ret
  end

  {
  args: ptr[stringList]
  returns: 
  
  prints a command then runs it
  }
  push proc execcmdecho 1 0
    0 1 (log.level)
    "CMD" "Run: " (log.msg)
    copy
    do
      copy read (log.cat)
      int.SIZE +
       
      copy if
        " " (log.cat)
      end
      copy read NULL !=
    end
    disc
    (log.log) 

    (os.execcmd)
    
    ret
  end

  {
  args: ptr[stringList]
  returns: 
  
  prints a command then runs it
  }
  push proc execcmdecholoud 1 0
    0 1 (log.level)
    "CMD" "Run: " (log.msg)
    copy
    do
      copy read (log.cat)
      int.SIZE +
       
      copy if
        " " (log.cat)
      end
      copy read NULL !=
    end
    disc
    (log.log) 

    (os.execcmdloud)
    
    ret
  end

  {
  args: int
  result: pointer
  
  gets the nth arguent from the command line
  }
  push proc args 1 1
    copy argc - 0 < ! if
      copy int.print
      "Bad arg" int.print
      disc -1 quit
    end
    int.SIZE * 
    argv +
  
    read
    ret
  end

  
  {
  args: ptr[name]
  result: ptr[value]
  
  gets an environment variable
  }
  push proc env 1 1
    os.targ swap put disc  
    
    envp
    do
      copy read
      '=' os.tempbuff cstr.split
      os.targ read cstr.eq if
        swap disc
        ret
      end
      disc

      int.SIZE +
      copy read NULL !=
    end
    disc

    NULL

    ret
  end

  {
  args: pointer int int
  result: int
  
  opens a file
  }
  push proc open 4 1
    
    ret
  end

  {
  args: int ptr
  result: int
  
  writes data to a file
  }
  push proc write 3 0
    sysc.WRITE sys3
  
    0 < if
      "Error writing file" cstr.println
      -1 quit
    end
    ret
  end
  
  {
  args: int ptr
  result: int
  
  writes data to a file
  }
  push proc readf 3 1
    sysc.READ sys3
    
    copy 0 < if
      "Error reading file" cstr.println
      disc -1 quit
    end
    ret
  end
  
  {
  args: int
  result:
  
  closes a file
  }
  push proc close 1 0
    sysc.CLOSE sys1
  
    0 < if
      "Error closing file" cstr.println
      -1 quit
    end
    ret
  end

  var cwdbuff 256

  push proc cwd 0 1
    os.cwdbuff
    255
    sysc.GETCWD sys2
    disc
    
    os.cwdbuff
    ret
  end
end


class dirent
  prop ino int.SIZE
  prop off int.SIZE
  prop reclen 2
  prop name 256

  oper proc getreclen 1 1
    dirent.reclen . read
    65535 &&

    ret
  end
end

class path
  prop path int.SIZE
  prop fd int.SIZE
  prop buff dirent.SIZE

  var tmp int.SIZE

  oper proc new 1 1
    path.tmp
    int.SIZE 2 *
    dirent.SIZE +
    (heap.alloc)
    put disc
    
    path.tmp read path.path .
    swap put disc
    
    0
    65536
    {TODO: magic num}
    path.tmp read path.path . read
    -100
    sysc.OPENAT
    sys4

    path.tmp read path.fd .
    swap put disc

    path.tmp read

    ret
  end

  push proc iter 1 2
    path.tmp swap put disc

    32
    path.tmp read path.buff .
    path.tmp read path.fd . read
    sysc.GETDENTS
    sys3
    1 < if
      path.tmp read (heap.free)

      NULL
      NULL

      ret
    end

    path.tmp read
    path.tmp read path.buff .

    ret
  end
end
