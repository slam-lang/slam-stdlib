inc "stdlib.slm"

const BRK 12

class heapentry
  prop Addr int.SIZE
  prop Flags 1
  prop Size int.SIZE
  prop Data 0

  push proc isentry 1 1
    copy
    copy heapentry.Addr . read ==
    covr heapentry.Flags . readc
    1 && 0 != &&

    swap disc

    ret
  end
end

class mem
  var tmp 8

  push proc cpy 3 0
    mem.tmp swap put disc
    covr
    covr == if [ disc disc ret ]
    do
      covr
      covr readc
      putc disc
  
      swap 1 +
      swap 1 +
  
      mem.tmp
      copy read
      1 -
      put disc
      mem.tmp read 0 >
    end
    disc
    disc
  
    ret
  end
  
  push proc eq 3 1
    swap mem.tmp swap put disc

    do
      covr readc
      mem.tmp read readc

      != if [
        disc
        disc

        bool.false
        ret
      ]

      swap 1 +
      swap 1 -

      mem.tmp
      copy read 1 +
      put disc
      

      copy 0 >
    end
    disc
    disc

    bool.true

    ret
  end

  push proc zero 2 0
    mem.tmp swap put disc
    do
      copy
      0
      putc disc
  
      1 +
  
      mem.tmp
      mem.tmp read
      1 - put disc
      mem.tmp read 0 >
    end
    disc
  
    ret
  end
end

class heap
  var startaddr int.SIZE
  var endaddr int.SIZE
  var reqsize int.SIZE
  var usedtemp int.SIZE
  var isinit 1

  const HEAP_PAGE 64000
  const HEAP_STEP 128

  push proc allocpage 0 0
    heap.endaddr read
    heap.HEAP_PAGE +
    copy
    heap.endaddr swap put disc

    BRK sys1 0 < if [
      "could not allocate heap" cstr.println
    ]

    ret
  end

  push proc init 0 0
    heap.isinit readc if [
      ret
    ]
    heap.isinit 1 putc disc

    { get the heap addr }
    heap.startaddr
    0 BRK sys1
    put disc
   
    { get the heap addr }
    heap.endaddr
    heap.startaddr read
    put disc

    (heap.allocpage)

    ret
  end

  push proc map 0 0
    heap.usedtemp 0 put disc

    "HEAP MAP" cstr.println
    "--------" cstr.println
    "size:   " cstr.print
    heap.endaddr read
    heap.startaddr read
    - int.print
    heap.startaddr read
    heap.HEAP_STEP -
    do
      heap.HEAP_STEP +
      copy (heapentry.isentry) if [
        "Object" cstr.println
        "  addr: " cstr.print
        copy int.printhex
        "  size: " cstr.print
        copy heapentry.Size . read
        copy heap.usedtemp read +
        heap.usedtemp swap put disc
        copy int.print
        +
        heap.HEAP_STEP -
      ]
      
      copy heap.endaddr read <
    end
    disc
    
    "used: " cstr.print

    heap.usedtemp read int.print
    cstr.cr

    ret
  end

  push proc alloc 1 1
    (heap.init)
    heapentry.SIZE +
    copy heap.HEAP_STEP /% swap disc -
    heap.HEAP_STEP +
    heap.reqsize swap put disc
    
    0
    heap.startaddr read
    swap heap.HEAP_STEP -
    swap heap.HEAP_STEP -
    do
      swap heap.HEAP_STEP +
      swap heap.HEAP_STEP +
      copy heap.endaddr read < ! if [
        (heap.allocpage)
      ]
      copy (heapentry.isentry) if [
        copy heapentry.Size . read +
        swap disc 0 heap.HEAP_STEP -
        swap heap.HEAP_STEP -
      ]
      covr heap.reqsize read <
    end
    swap disc
     
    heap.reqsize read -

    copy heapentry.Size .
    heap.reqsize read
    put disc
    copy
    copy heapentry.Addr .
    swap
    put disc
    copy heapentry.Flags .
    1
    putc disc

    heapentry.SIZE +

    ret
  end
  
  push proc zalloc 1 1
    (heap.init)
    (heap.alloc)
    copy
    
    copy heapentry.SIZE -
    heapentry.Size .
    read
    (mem.zero)

    ret
  end

  push proc free 1 0
    heapentry.SIZE -
    copy (heapentry.isentry) ! if [
      "Bad free call" cstr.println
      int.printhex ret
    ]
   
    heapentry.Flags .
    0
    putc disc

    ret
  end

  push proc tryfree 1 0
    heapentry.SIZE -
    copy (heapentry.isentry) ! if [
      disc ret
    ]
   
    heapentry.Flags .
    0
    putc disc

    ret
  end

  var result int.SIZE
  var start int.SIZE
  
  {
  args: ptr[mem] int[newsize]
  result: ptr[mem]

  reallocates a block
  }
  push proc realloc 2 1
    heapentry.SIZE +
    copy heap.HEAP_STEP /% swap disc -
    heap.HEAP_STEP +
    heap.reqsize swap put disc

    copy
    heapentry.SIZE - (heapentry.isentry) ! if [
      "Bad realloc call" cstr.println
      copy heapentry.SIZE - int.printhex ret
    ]
    copy (heap.free)

    heap.result
    heap.reqsize read
    (heap.alloc)
    put disc

    heap.result read swap
    copy
    heapentry.SIZE -
    heapentry.Size . read
    heapentry.SIZE -
    
    (mem.cpy)

    heap.result read
    ret
  end
end

{ TODO }
class opt
  prop val 0
end
