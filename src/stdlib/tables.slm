{
TABLES:
data structure

tables are a list of sets of data,
each entry is a 15 char terminated string and then a number

TODO: remove
TODO: defrag
}

inc stdlib.slm
inc mem.slm

class tab
  prop Max int.SIZE
  prop Entry int.SIZE
  prop Data 0
  
  var entrytmp int.SIZE
  var valuetmp int.SIZE
  var curtmp int.SIZE
  
  {
  args: int[size] int[entrysize] ptr[table]
  result: ptr[table]
  
  construct a table
  }
  proc new 2 1
    swap tab.entrytmp swap put disc
    tab.curtmp
    covr (heap.alloc)
    put disc

    tab.Data -
    tab.curtmp read
    tab.Max .
    swap put disc
    
    tab.curtmp read
    tab.Entry .
    tab.entrytmp read
    put disc

    tab.curtmp read
    ret
  end
  
  proc curentryaddr 1 2
    tab.curtmp read
    tab.Data .
    covr
    tab.curtmp read
    tab.Entry . read 
    8 + *
    copy
    tab.curtmp read
    tab.Max . read
    > if [
      "TABLE OVERFLOW" (cstr.println)
      disc disc 0 ret
    ]
    +
  
    ret
  end

  {
  args: int[data] ptr[value] ptr[table]
  result: ptr[table]
  
  puts data into a table
  }
  proc put 3 1
    tab.valuetmp swap put disc
    tab.entrytmp swap put disc
    tab.curtmp swap put disc
    
    tab.curtmp read
    tab.Entry . read
    
    tab.entrytmp read (cstr.len) < if [
      "STRING TOO LONG FOR TABLE" (cstr.println)
      tab.entrytmp read (cstr.println)
      -1
      quit
    ]
  
    -1
    do
      1 +
      (tab.curentryaddr)

      copy NULL == if [disc ret]
      
      copy read NULL ==
      swap tab.entrytmp read (cstr.eq) ||
      !
    end
  
    (tab.curentryaddr)
    
    swap disc
  
    tab.entrytmp read (cstr.copy) disc
    tab.curtmp read
    tab.Entry . read +
    tab.valuetmp read put disc
    
    tab.curtmp read
    ret
  end
  
  {
  args: ptr[table]
  result:
  
  prints a table
  }
  proc print 1 0
    tab.curtmp swap put disc
  
    0
    do
      (tab.curentryaddr)
      copy NULL == if [disc disc ret]
  
      copy (cstr.print) ":" (cstr.print)
      tab.curtmp read
      tab.Entry . read +
      read (int.print)
  
      1 +
      (tab.curentryaddr)
      read
    end
    disc
    ret
  end
  
  {
  args: ptr[key] ptr[table]
  result: ptr[table]
  
  gets a key from the table
  }
  proc get 2 2
    tab.entrytmp swap put disc
    tab.curtmp swap put disc
    
    tab.curtmp read
    tab.Entry . read
    tab.entrytmp read (cstr.len) < if [
      "STRING TOO LONG FOR TABLE" (cstr.println)
      tab.entrytmp read (cstr.println)
      -1
      quit
    ]
  
    -1
    do
      1 +
      (tab.curentryaddr)
      copy NULL == if [disc NULL ret]
  
      copy readc NULL == if [disc NULL ret]
  
      tab.entrytmp read (cstr.eq) !
    end
    (tab.curentryaddr)
    tab.curtmp read
    tab.Entry . read 
    +
    read
  
    swap disc
    
    tab.curtmp read
    swap

    ret
  end
  
  {
  args: size ptr[value] ptr[table]
  result: int
  
  checks if a value is in a table
  }
  proc in 2 2
    tab.entrytmp swap put disc
    tab.curtmp swap put disc
  
    tab.curtmp read tab.Data .
    -1
    do
      1 +
      (tab.curentryaddr)
      copy NULL == if [disc disc bool.false ret]
  
      copy readc NULL == if [disc disc bool.false ret]
  
      tab.entrytmp read (cstr.eq) !
    end
    disc
    disc
    
    tab.curtmp read
  
    bool.true
    ret
  end
  
  {
  args: ptr[table]
  result: ptr[table]
  
  defragments a table
  }
  {TODO} 

  proc free 1 0
    (heap.free)

    ret
  end
end
