inc "stdlib/mem.slm"
inc "stdlib.slm"

class arr
  prop Size int.SIZE
  prop Elem int.SIZE
  prop pData int.SIZE
end

class seq
  prop Size int.SIZE
  prop Max  int.SIZE
  prop Elem int.SIZE
  prop Data 0

  var curtemp int.SIZE
  var elemtemp 32
  
  {
  args: int[maxSize] int[elemSize]
  returns: ptr[seq]

  Creates an seq
  }
  oper proc new 2 1
    copy (heap.zalloc) seq.curtemp swap put disc
    seq.elemtemp swap put disc

    seq.curtemp read
    seq.Elem .
    swap put disc
    
    seq.curtemp read
    seq.Max .

    seq.elemtemp read
    seq.Data -

    put disc
    
    seq.curtemp read
    seq.Size .
    0
    put disc
  
    seq.curtemp read
    ret
  end
  
  {
  args: int[size] ptr[seqay]
  returns: ptr[seqay]
  }
  oper proc setlen 2 1
    swap seq.curtemp swap put disc

    seq.curtemp read
    seq.Size .

    swap put disc
    
    seq.curtemp read
    ret
  end
  
  {
  args: ptr[seqay]
  returns: int[size] ptr[seqay]
  }
  oper proc len 1 2
    copy
    seq.Size . read
  
    ret
  end
  
  {
  args: ptr[data] ptr[seqay]
  returs: ptr[seqay]
  }
  oper proc pushint 2 1
    seq.elemtemp swap put disc
    seq.curtemp swap put disc
    
    seq.curtemp read
    seq.Elem . read
    
    seq.curtemp read
    seq.Size . read
  
    1 + *
    
    seq.curtemp read
    seq.Max . read
    > if
      "ARRAY OVERFLOW" cstr.println
      -1 quit
    end
    
    seq.curtemp read
    seq.Elem . read
    
    seq.curtemp read
    seq.Size . read
    *
    
    seq.curtemp read
    seq.Data .
    +
    
    seq.elemtemp read
    put disc
    
    seq.curtemp read
    seq.Size .

    copy read
    1 +
    put
  
    ret
  end
  
  {
  args: ptr[data] ptr[seqay]
  returs: ptr[seqay]
  }
  oper proc pushptr 2 1
    seq.elemtemp swap put disc
    seq.curtemp swap put disc
    
    seq.curtemp read
    seq.Elem . read
    
    seq.curtemp read
    seq.Size . read
  
    1 + *
    
    seq.curtemp read
    seq.Max . read
    > if 
      "ARRAY OVERFLOW" cstr.println
      -1 quit
    end
    
    seq.curtemp read
    seq.Elem . read
    
    seq.curtemp read
    seq.Size . read
    *
    
    seq.curtemp read
    seq.Data .
    +
    
    seq.elemtemp read
    
    seq.curtemp read
    seq.Elem . read
    (mem.cpy)
    
    seq.curtemp read
    seq.Size .

    copy read
    1 +
    put
  
    ret
  end

  oper proc extend 2 1
    swap seq.curtemp swap put disc

    seq.curtemp read
    seq.Size . read +
    
    seq.curtemp read
    seq.Size . swap

    put disc
  
    seq.curtemp read

    ret
  end
  
  oper proc getaddr 2 2 
    swap seq.curtemp swap put disc
  
    copy
    seq.curtemp read
    seq.Size . read
    > if 
      NULL ret
    end
    
    seq.curtemp read
    seq.Elem . read
    *

    seq.curtemp read
    seq.Data .
    +

    seq.curtemp read
    swap

    ret
  end
  
  push proc print 1 0
    seq.curtemp swap put disc
    "[" cstr.print
    seq.curtemp read
    seq.Data . cstr.print
    
    seq.curtemp read
    seq.Size . read

    1 == if
      "]" cstr.println
      ret
    end

    0
    do
      ", " cstr.print

      1 +
      copy
      seq.curtemp read
      seq.Elem . read
      *
    
      seq.curtemp read
      seq.Data .
      + cstr.print
 
      copy
      seq.curtemp read
      seq.Size . read
      1 - <
    end
    disc

    "]" cstr.println
    
    ret
  end

  push proc popaddr 1 2
    seq.curtemp swap put disc
    
    seq.curtemp read
    seq.Size . read

    1 -

    seq.curtemp read
    seq.Elem . read
    *
    
    seq.curtemp read
    seq.Data . +

    seq.elemtemp
    
    swap put disc

    seq.curtemp read
    seq.Size .

    copy read
    1 -
    put disc

    seq.curtemp read
    seq.elemtemp read
    ret
  end

  push proc pop 1 2
    seq.curtemp swap put disc
    
    seq.curtemp read
    seq.Size . read

    1 -

    seq.curtemp read
    seq.Elem . read
    *
    
    seq.curtemp read
    seq.Data . + copy

    seq.elemtemp

    swap

    seq.curtemp read
    seq.Elem . read
    (mem.cpy) 

    
    seq.curtemp read
    seq.Elem . read
    (mem.zero)

    seq.curtemp read
    seq.Size .

    copy read
    1 -
    put disc

    seq.curtemp read
    seq.elemtemp
    ret
  end

  push proc free 1 0
    (heap.free)
  
    ret
  end

  {TODO: push proc in 2 2}
end

class llentry
  {TODO: Not recursive}

  prop next int.SIZE
  prop data 0
 
  push proc new 1 1
    8 +
    (heap.zalloc)

    ret
  end

  push proc free 1 0
    copy llentry.next . read
    copy NULL != if
      copy (llentry.free)
    end
    disc

    (heap.free)
    
    ret
  end

  push proc last 1 1
    copy llentry.next . read
    NULL == if
      ret
    end
    
    llentry.next . read
    (llentry.last)

    ret
  end

  push proc pop 1 1
    copy llentry.next . read
    NULL == if
      ret
    end
    
    copy llentry.next . read
    (llentry.pop)

    copy llentry.next . read
    llentry.next . read
    NULL == if
      copy llentry.next . NULL put disc
    end

    disc

    ret
  end

  push proc ptrat 2 1
    copy 0 == if
      disc
      llentry.next . read
      llentry.data .
      ret
    end

    1 -
    covr llentry.next . read
    swap
    (llentry.ptrat)
    swap disc

    ret
  end

  push proc append 2 1
    covr llentry.next . swap put disc
      
    ret
  end
  
  push proc print 2 1
    covr llentry.data .
    covr () disc
    
    covr llentry.next . read
    covr

    covr NULL != if
      ", " cstr.print
      (llentry.print) 0
    end
    disc
    disc
    disc

    ret
  end
end

class llist
  prop entry int.SIZE
  prop root int.SIZE

  var curtemp int.SIZE

  push proc new 1 1
    16 (heap.zalloc)

    covr
    covr llist.entry . swap put disc
    swap disc

    ret
  end

  push proc free 1 0
    copy llist.root . read
    copy NULL != if
      copy (llentry.free)
    end
    disc

    (heap.free)

    ret
  end

  push proc last 1 2
    copy llist.root . read NULL == if NULL ret end
    copy llist.root . read (llentry.last)
    
    ret
  end

  push proc pop 1 2
    copy llist.root . read NULL == if NULL ret end
    copy llist.root . read (llentry.pop)
    
    ret
  end

  push proc len 1 1
    {TODO: Implement}
    copy llist.root . read NULL == if disc 0 ret end
    llist.root . read
    NULL swap
    do
      swap 1 +
      swap

      llentry.next . read
      copy NULL !=
    end
    disc

    ret
  end 

  var calltmp int.SIZE

  push proc foreach 2 0
    llist.calltmp swap put disc

    llist.root . read
    copy NULL == if disc ret end

    do
      copy llentry.data . llist.calltmp read () disc 

      llentry.next . read
      copy NULL !=
    end
    disc
    
    ret
  end
  
  push proc ptrat 2 1
    swap llist.curtemp swap put disc

    copy 0 == if
      disc
      llist.curtemp read llist.root . read
      llentry.data .
      ret
    end

    1 -
    llist.curtemp read llist.root . read
    swap
    (llentry.ptrat)

    ret
  end

  push proc append 2 1
    swap llist.curtemp swap put disc

    llist.curtemp read
    (llist.last) swap disc

    NULL == if
      llist.curtemp read
      llist.entry . read
      (llentry.new)

      llist.curtemp read
      llist.root . swap put read
      llentry.data .
      swap
      
      llist.curtemp read
      llist.entry . read
      (mem.cpy)

      llist.curtemp read
      ret
    end
    
    llist.curtemp read
    llist.entry . read
    (llentry.new)
    
    llist.curtemp read
    (llist.last) swap disc
    swap (llentry.append)
    disc
     
    llist.curtemp read
    (llist.last) swap disc
    llentry.data .
    swap

    llist.curtemp read
    llist.entry . read
    (mem.cpy)
    
    llist.curtemp read

    ret
  end

  push proc print 2 1
    covr llist.root . read
    covr

    covr NULL != if
      (llentry.print) 0
    end
    disc
    disc
    disc

    ret
  end
end

class dlist
  prop max int.SIZE
  prop size int.SIZE
  prop elemsize int.SIZE
  prop data 0

  const STEP 8

  var tmp int.SIZE

  push proc new 1 1
    dlist.tmp
    covr dlist.STEP * 24 + (heap.zalloc)
    put disc

    dlist.tmp read dlist.max . covr dlist.STEP * put disc
    dlist.tmp read dlist.size . 0 put disc
    dlist.tmp read dlist.elemsize . swap put disc

    dlist.tmp read

    ret
  end

  push proc free 1 0
    (heap.free)

    ret
  end

  push proc len 1 1
 
    dlist.size . read

    ret
  end

  push proc ptrat 2 1
    swap
    dlist.tmp swap put disc

    dlist.tmp read dlist.size . read
    covr > ! if
      disc NULL ret
    end

    dlist.tmp read dlist.elemsize . read *
    dlist.tmp read dlist.data . +

    ret
  end

  push proc pop 1 1
    dlist.tmp swap put disc

    dlist.tmp read dlist.size . read
    0 == if
      NULL ret
    end

    dlist.tmp read
    dlist.tmp read
    dlist.tmp read dlist.size . read 1 -
    (dlist.ptrat)
    swap disc

    dlist.tmp read dlist.size .
    copy read 1 -
    put disc

    ret
  end

  push proc last 1 2
    dlist.tmp swap put disc

    dlist.tmp read
    dlist.tmp read
    dlist.tmp read dlist.size . read 1 -
    (dlist.ptrat)
    
    ret
  end

  push proc append 2 1
    swap
    dlist.tmp swap put disc

    dlist.tmp read dlist.size . read 1 +
    dlist.tmp read dlist.elemsize . read *
    dlist.tmp read dlist.max . read < ! if
      dlist.tmp read dlist.max . read
      dlist.tmp read dlist.elemsize . read
      dlist.STEP * + 24 +

      dlist.tmp read swap (heap.realloc)
      dlist.tmp swap put disc

      dlist.tmp read dlist.max .

      dlist.tmp read dlist.max . read
      dlist.tmp read dlist.elemsize . read
      dlist.STEP * +

      put disc
    end
    
    dlist.tmp read dlist.size . read
    dlist.tmp read dlist.elemsize . read *
    dlist.tmp read dlist.data . +
    swap

    dlist.tmp read dlist.elemsize . read
    (mem.cpy)

    dlist.tmp read dlist.size .
    copy read 1 +
    put disc

    dlist.tmp read
    ret
  end
end
