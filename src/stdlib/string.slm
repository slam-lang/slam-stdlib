inc stdlib/mem.slm
inc stdlib.slm

class str
  prop max int.SIZE
  prop size int.SIZE
  prop data 0
  
  var workingtemp int.SIZE
  var rawtemp int.SIZE
  var maxtemp int.SIZE
  
  const STEP 64

  {
  args:
  result: ptr[str]

  creats a string from a ` string
  }
  proc new 0 1
    str.STEP 16 + (heap.zalloc)

    copy str.max . str.STEP put disc
    
    ret
  end

  {
  args: ptr[str]
  result:

  prints a string
  }
  proc print 1 0
    str.workingtemp swap put disc
    
    0
    do

      copy
      str.workingtemp read
      str.data . +
      readc dump
      
      1 +
      
      copy
      str.workingtemp read
      str.size . read
      <
    end
    disc
    ret
  end
  
  {
  args: ptr[str]
  result:

  prints a string followed by a new line
  }
  proc println 1 0
    (str.print)
    (cstr.cr)

    ret
  end

  {
  args: ptr[str]
  result: int[length]
  
  gets the length of a string
  }
  proc len 1 1
    str.size . read

    ret
  end

  {
  args: ptr[str]
  result: int[length]
  
  gets the length of a string
  }
  proc endaddr 1 1
    str.workingtemp swap put disc
    
    str.workingtemp read str.data .
    str.workingtemp read (str.len) +

    ret
  end

  {
  args: ptr[cstr1] ptr[cstr2]
  result: ptr[cstr1]
  
  concatinates 2 strings
  }
  proc cat 2 1
    swap str.workingtemp swap put disc

    copy (str.len)
    str.workingtemp read (str.len) +
    str.workingtemp read str.max . read
    > if [
      copy (str.len)
      str.workingtemp read (str.len) +
      str.STEP +
      copy
      str.workingtemp read str.max .
      swap put disc
      str.workingtemp read swap
      (heap.realloc)
      str.workingtemp swap put disc
    ]
    
    copy
    str.workingtemp read (str.endaddr)
    swap
    copy (heap.free)
    copy (str.len)
    swap str.data .
    swap
    (mem.copy)
    
    (str.len)
    str.workingtemp read (str.len) +
    str.workingtemp read str.size .
    swap put disc

    str.workingtemp read

    ret
  end
  
  proc catc 2 1
    swap str.workingtemp swap put disc

    copy (cstr.len)
    str.workingtemp read (str.len) +
    str.workingtemp read str.max . read
    > if [
      copy (cstr.len)
      str.workingtemp read (str.len) +
      str.STEP +
      copy
      str.workingtemp read str.max .
      swap put disc
      str.workingtemp read swap
      (heap.realloc)
      str.workingtemp swap put disc
    ]
    
    copy
    str.workingtemp read (str.endaddr)
    swap
    copy (cstr.len)
    (mem.copy)
    
    (cstr.len)
    str.workingtemp read (str.len) +
    str.workingtemp read str.size .
    swap put disc

    str.workingtemp read

    ret
  end

  proc put 3 1
    swap str.rawtemp swap put disc
    swap str.workingtemp swap put disc
  
    str.rawtemp read
    str.workingtemp read
    str.max . read >
    if [
      str.workingtemp read
      str.rawtemp read
      str.STEP +
      copy
      str.workingtemp read str.max .
      swap put disc
      (heap.realloc)
      str.workingtemp swap put disc
    ]
   
    str.workingtemp read
    str.data . swap
    str.rawtemp read
    (mem.copy)
    
    str.workingtemp read
    str.size .
    str.rawtemp read
    put disc

    str.workingtemp read
    
    ret
  end

  proc eq 2 1
    covr (str.len)
    covr (cstr.len) != if [ disc disc bool.false ret ]

    covr str.data .
    covr
    copy (cstr.len)
    (mem.eq)

    swap disc
    swap disc

    ret
  end
  
  proc free 1 0
    (heap.free)
    
    ret
  end
end
