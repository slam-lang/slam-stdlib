inc stdlib/mem.slm
inc stdlib/os.slm
inc stdlib.slm

class sockaddr
  prop family 2
  prop port 2
  prop addr 4
  prop misc 8
  
  const FAMI_MASK FFFFh
  const PORT_MASK FFFFh
  const ADDR_MASK FFFFFFFFh

  var temp int.SIZE

  push proc reset 1 1
    copy 16 (mem.zero)

    ret
  end

  push proc setfamily 2 1
    swap sockaddr.temp swap put disc

    sockaddr.FAMI_MASK &&

    sockaddr.temp read
    sockaddr.family .
    swap put disc

    sockaddr.temp read
    ret
  end
  
  push proc setaddr 2 1
    swap sockaddr.temp swap put disc

    sockaddr.ADDR_MASK &&

    sockaddr.temp read
    sockaddr.addr .
    swap put disc

    sockaddr.temp read
    ret
  end

  push proc setport 2 1
    swap sockaddr.temp swap put disc
    
    copy 00ffh &&      0100h *
    swap 0100h /% disc 00ffh &&
    ||

    sockaddr.temp read
    sockaddr.port .
    swap put disc

    sockaddr.temp read
    ret
  end
end

class net
  prop fd int.SIZE
  prop connfd int.SIZE
  prop servaddr sockaddr.SIZE
  prop cliaddr sockaddr.SIZE
  prop clilen int.SIZE
  
  const AF_INET 2
  const SOCK_STREAM 1
  const INADDR_ANY 0

  var temp int.SIZE
  var buff int.SIZE
  var port int.SIZE
  
  {
  args: ptr[data] int[port]
  }
  push proc open 2 1
    net.port swap put disc
    net.temp swap put disc

    0 net.SOCK_STREAM net.AF_INET sysc.SOCKET sys3

    copy 0 < if [
      "ERROR creating socket" cstr.println
      -1 quit
      {TODO: Log}
    ]
    
    net.temp read net.fd .
    swap
    put disc
    
    net.temp read net.servaddr .
    (sockaddr.reset)
    
    net.AF_INET
    (sockaddr.setfamily)
    
    net.INADDR_ANY
    (sockaddr.setaddr)
    
    net.port read
    (sockaddr.setport)
    disc

    sockaddr.SIZE
    net.temp read net.servaddr .
    net.temp read net.fd . read
    sysc.BIND sys3
    0 < if [
      "ERROR binding" cstr.println
      -1 quit
      {TODO: Log}
    ]

    5
    net.temp read net.fd . read
    sysc.LISTEN sys2
    0 < if [
      "ERROR starting listening" cstr.println
      -1 quit
      {TODO: Log}
    ]

    net.temp read
    ret
  end
  
  push proc poll 1 1
    net.temp swap put disc
    
    net.temp read net.clilen .
    net.temp read net.cliaddr .
    net.temp read net.fd . read
    sysc.ACCEPT sys3
    copy 0 < if [
      "ERROR accepting client" cstr.println
      -1 quit
      {TODO: Log}
    ]
    net.temp read net.connfd .
    swap
    put disc

    net.temp read
    ret
  end
  
  {
  args: int[bufsize] ptr[buffer] ptr[inet]
  result: int[read] ptr[inet]

  }
  push proc read 3 2
    net.buff swap put disc
    swap net.temp swap put disc
    
    net.buff read cstr.clear
    net.temp read net.connfd . read
    (os.readf)

    net.temp read
    swap

    ret
  end

  {
  args: ptr[buffer] ptr[inet]
  result: int[read] ptr[inet]

  }
  push proc write 2 1
    swap net.temp swap put disc

    copy cstr.len swap
    net.temp read net.connfd . read
    (os.write)
  
    net.temp read
    ret
  end

  push proc finish 1 1
    copy
    net.connfd .
    copy read (os.close)
    0
    put disc

    ret
  end
  
  push proc close 1 0
    net.fd .
    read (os.close)

    ret
  end
end

class http
  prop server 32
  
  var resp 8
  var temp 8

  var getline 32
  var gettemp 32
  var geturl 32

  {
  args: ptr[server] ptr[http]
  result: ptr[http]

  }
  push proc setserver 2 1
    swap http.temp swap put disc

    http.temp read http.server .
    swap
    cstr.cpy swap disc disc

    http.temp read
    ret
  end

  {
  args: ptr[buffer] int[resp] ptr[http]
  result: ptr[buffer] ptr[http]

  }
  push proc getheader 3 2
    swap cstr.clear
    swap http.resp swap put disc
    swap http.temp swap put disc
    
    "HTTP/1.1 " cstr.cat
    http.resp read (int.cstr) cstr.cat
    " OK\r\n" cstr.cat
    "Server: " cstr.cat
    http.temp read http.server . cstr.cat
    "\r\n" cstr.cat
    "Content-Type: text/html\r\n" cstr.cat
    "Conection: Closed\r\n" cstr.cat
    "\r\n" cstr.cat

    http.temp read swap
    ret
  end

  {
  args 
  }
  push proc parseurl 2 2
    13 {\r} http.getline (cstr.split) swap disc
    ' ' http.gettemp (cstr.split) disc
    ' ' http.geturl (cstr.split) swap disc

    ret
  end
end
